#!/usr/bin/env bash

#######################################################
# NewbashscriptCanva
# Sami El Hilali
# 2022_may_27
#######################################################

# This script is intended to create canvas in order to
# make it easier to create new bashscripts correctly shaped.

####### PARSE parameters
while getopts a:t:o:l:h option
do
	case "${option}"
	in
	a) Author=${OPTARG};;
	t) Title=${OPTARG};;
	o) Options=${OPTARG};;
	l) Letters=${OPTARG};;
	h) echo "NewBashScript - usage :";
	   echo "-a Author name";
	   echo "-t Title of the script";
	   echo "-o option names separated by \",\" as in \"opt1,opt2,...,optn\"";
	   echo "-h prints this message and exit";
	   exit;;
	?) echo "NewBashScript - usage :";
	   echo "-a Author name";
	   echo "-t Title of the script";
	   echo "-o option names separated by \",\" as in \"opt1,opt2,...,optn\"";
	   echo "-h prints this message and exit";
	   exit;;
	esac
done


# Header :

echo -e "#!/usr/bin/env bash\n"

echo "#######################################################"
echo "# $Title"
echo "# $Author"
# print the date :
DATE=($(date '+ %Y_%B_%d'))
echo "# $DATE"
echo "#######################################################"

echo -e "\n# DESCRIPTION OF THE SCRIPT\n"

# Options :
echo -e "####### PARSE parameters\n"
#Letters=($(echo "$Options" | awk -F "," '{for (i = 0; i <= NF; i++) {print i"x:"}}'| awk '{print $0"h"}'))

Letters=($(echo "$Options" | awk -F "," '{for (i = 1; i <= NF; i++) {print "x:"}}'| tr -d "\n" | awk '{print $0"h"}'))
echo -e "while getopts $Letters option\ndo\n\tcase \"\${option}\"\n\tin"

# divide the string into an array
IFS=',' read -r -a array <<< "$Options"
# iterate on the array to write a line per option
for element in "${array[@]}"
do
    echo -e "\tx) $element=\${OPTARG};;"
done

# write h)
echo -e "\th) echo \"$Title - usage :\";"
for element in "${array[@]}"
do
    echo -e "\t   echo\"-x $element\";"
done
echo -e "\t   exit;;"

# write ?)
echo -e "\t?) echo \"$Title - usage :\";"
for element in "${array[@]}"
do
    echo -e "\t   echo\"-x $element\";"
done
echo -e "\t   exit;;"

echo -e "\tesac\ndone"


# Body :

echo "#########################"
echo -e "# exit if a command fails\nset -e\n########"
echo -e "######################### RUN\n\n######################### DONE"
